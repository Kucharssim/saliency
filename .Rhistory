devtools::uses_testthat()
devtools::use_testthat()
use_testthat()
library(imager)
library(OpenImageR)
# sandbox
file <- system.file('extdata/parrots.png',package='imager')
im <- load.image(file)
red   <- im[,,1,1]
green <- im[,,1,2]
blue  <- im[,,1,3]
intensity <- (red + green + blue) / 3
pyr <- gaussian_pyramid(intensity)
devtools::load_all(".")
pyr <- gaussian_pyramid(intensity)
sapply(pyr, dim)
center_surround(pyr$`0`, pyr$`4`)
debug(center_surround)
center_surround(pyr$`0`, pyr$`4`)
table(which_cols)
out[which_rows, which_cols]
center[which_rows, which_cols]
surround[row_s, col_s]
out[which_rows, which_cols]
out
out
summary(out)
image(out)
devtools::load_all(".")
cs <- center_surround(pyr$`0`, pyr$`4`)
image(cs)
image(pyr$`0`)
image(pyr$`4`)
par(mfrow = c(1, 3))
image(pyr$`0`)
image(pyr$`4`)
image(cs)
table(cs == TRUE)
table(cs == NA)
table(is.na(cs))
image(is.na(cs))
1:10
1:10/10
0.5/10
0.1 - 0.05
0.1 + 0.05
devtools::load_all(".")
cs <- center_surround(pyr$`0`, pyr$`4`)
image(is.na(cs))
image(cs)
im
class(im)
imager::channel(im, 1)
imager::channel(im, 1:2)
str(imager::channel(im, 1:2))
imager::is.cimg(im)
imager::is.cimg
try(stop("bla"))
is(try(stop("bla")), "try-error")
imager::channel(im, 1)
as.matrix(imager::channel(im, 1))
dyt(as.matrix(imager::channel(im, 1)))
str(as.matrix(imager::channel(im, 1)))
str(as.matrix(imager::channel(im, "r")))
channel
channels(im)
str(channels(im))
channels <- imager::channels(image)
channels <- imager::channels(im)
channels <- lapply(channels, as.matrix)
str(channels)
names(channels) <- c("R", "G", "B")
channels
channels
sapply(channels, dim)
do.call("+", channels)
do.call(sum(), channels)
do.call(sum, channels)
Reduce("+", channels)
Reduce("+", channels) / 3
intensity <- Reduce("+", channels) / 3
channels
intensity
lapply(channels, function(i) i / intensity)
divide_by(channels[[1]], intensity)
channels  <- lapply(channels, divide_by, intensity)
image(channels$R)
image(channels$G)
image(channels$b)
image(channels$B)
which_set_zero <- which(intensity < 0.1 * max(intensity), arr.ind = TRUE)
which_set_zero
which_set_zero <- which(intensity < 0.1 * max(intensity), arr.ind = FALSE)
which_set_zero
which_set_zero <- which(intensity < 0.1 * max(intensity), arr.ind = TRUE)
nrow(which_set_zero)
channels$which_set_zero
channels$R[which_set_zero]
intensity
intensity==0
sum(intensity==0)
channels  <- lapply(channels, function(ch) {ch[which_set_zero] <- 0; return(ch)})
channels$R[which_set_zero]
channels$R
image(channels$R)
intensity <- gaussian_pyramid(intensity, octaves = 8, gaussian_blur = TRUE, gauss_sigma = 1, gauss_range = 3)
broad_channels <- list()
broad_channels$R <- channels$R - (channels$G + channels$B) / 2
broad_channels$G <- channels$G - (channels$R + channels$B) / 2
broad_channels$B <- channels$B - (channels$R + channels$G) / 2
broad_channels$Y <- (channels$R + channels$G) / 2 - abs(channels$R - channels$G) / 2 - channels$B
broad_channels$Y[broad_channels$Y < 0] <- 0
image(broad_channels$Y)
image(broad_channels$R)
OpenImageR::GaborFeatureExtract
4*3*2
c_scale <- c(2, 3, 4)
s_scale <- c_scale + c(3, 4)
c_scale <- c(2, 3, 4)
d_scale <- c(3, 4)
sapply(c_scale, function(c) c+d_scale)
lapply(c_scale, function(c) c+d_scale)
devtools::load_all(".")
feature_maps(intensity)
str(feature_maps(intensity))
devtools::load_all(".")
str(feature_maps(intensity))
as.character(0)
dim(intensity$`2`)
dim(intensity[[2]])
broad_channels$R - broad_channels$G
broad_channels <- lapply(broad, channels, gaussian_pyramid, octaves = 8, gaussian_blur = TRUE, gauss_sigma = 1, gauss_range = 3)
broad_channels <- lapply(broad_channels, gaussian_pyramid, octaves = 8, gaussian_blur = TRUE, gauss_sigma = 1, gauss_range = 3)
broad_channels$R - broad_channels$G
as.character(seq_len(9) - 1)
diff_pyramids <- function(pyr1, pyr2){
ll <- length(pyr1)
if(ll != length(pyr2)) stop("pyramids must have the same number of octaves")
out <- list()
for(i in seq_len(ll)) out[[i]] <- pyr1[[i]] - pyr2[[i]]
names(out) <- as.character(seq_len(ll) - 1)
return(out)
}
diff_pyramids(broad_channels$R, broad_channels$G)
red_green_oponency <- feature_maps(diff_pyramids(broad_channels$R, broad_channels$G),
diff_pyramids(broad_channels$G, broad_channels$R))
red_green_oponency
length(red_green_oponency)
image(red_green_oponency$`2_5`)
image(intensity)
image(intensity$`0`)
gabor <- OpenImageR::GaborFeatureExtract$new()
gabor
gabor$gabor_feature_extraction()
gabor$gabor_feature_extraction(intensity$`0`)
gabor$gabor_feature_extraction(intensity$`0`, scales = 1)
gabor$gabor_feature_extraction(intensity$`0`, scales = 1, orientations = 45)
gabor$gabor_feature_extraction(intensity$`0`, scales = 9, orientations = 8, gabor_rows = 39, gabor_columns = 39)
gabor$gabor_feature_extraction(image = intensity$`0`, scales = 9, orientations = 8, gabor_rows = 39, gabor_columns = 39)
foo <- gabor$gabor_feature_extraction(image = intensity$`0`, scales = 9, orientations = 8, gabor_rows = 39, gabor_columns = 39)
str(foo)
gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)
39^2
devtools::load_all(".")
gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real
gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[1,1]
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[1,1])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,1]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[2,2]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[3,2]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[3,3]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[4,3]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[4,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[4,5]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[4,4]])
image(gabor$gabor_filter_bank(8, 4, 100, 100, plot_data = TRUE)$gabor_real[[4,4]])
image(gabor$gabor_filter_bank(8, 4, 100, 100, plot_data = TRUE)$gabor_real[[4,10]])
image(gabor$gabor_filter_bank(8, 4, 100, 100, plot_data = TRUE)$gabor_real[[4,4]])
image(gabor$gabor_filter_bank(8, 4, 100, 100, plot_data = TRUE)$gabor_real[[8,4]])
image(gabor$gabor_filter_bank(8, 4, 100, 100, plot_data = TRUE)$gabor_real[[1,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,1]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,2]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,3]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_imaginary[[1,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_complex[[1,4]])
image(gabor$gabor_filter_bank(8, 4, 39, 39, plot_data = TRUE)$gabor_real[[1,4]])
gabor$gabor_feature_engine()
gabor$gabor_feature_engine
??GaborFeatureExtract
gb_im <- gabor$gabor_feature_extraction(image = im, scales = 5, orientations = 4, gabor_rows = 39, gabor_columns = 39, plot_data=TRUE)
gb_im <- gabor$gabor_feature_extraction(image = intensity$`0`, scales = 5, orientations = 4, gabor_rows = 39, gabor_columns = 39, plot_data=TRUE)
gabor$plot_gabor(gb_im)
gabor$plot_gabor(gb_im$gabor_features_real)
gb_im$gaborFeatures
gb_im$gabor_features_real
str(gb_im$gabor_features_real)
str(gb_im$gabor_features_imaginary)
gb_im <- gabor$gabor_feature_extraction(image = intensity$`0`, scales = 1, orientations = 4, gabor_rows = 39, gabor_columns = 39, plot_data=TRUE)
str(gb_im$gabor_features_real)
gaussian_pyramid()
gaussian_pyramid
2^1
2^1
sdf
2^1
2^0
gabor_pyramid <- function(image, octaves=8, orientations=4){
out <- list()
gabor <- OpenImageR::GaborFeatureExtract$new()
gb_im <- list()
for(i in 0:octaves) {
out[[i]] <- gabor$gabor_feature_extraction(image = image, scales = 1, orientations = orientations,
gabor_rows = 39, gabor_columns = 39,
downsample_gabor = TRUE, downsample_rows = 2^i, downsample_cols = 2^i,
vectorize_magnitude = FALSE)
}
}
library(imager)
library(OpenImageR)
# sandbox
file <- system.file('extdata/parrots.png',package='imager')
im <- load.image(file)
red   <- im[,,1,1]
green <- im[,,1,2]
blue  <- im[,,1,3]
intensity <- (red + green + blue) / 3
gab <- gabor_pyramid(intensity)
devtools::load_all(".")
gab <- gabor_pyramid(intensity)
devtools::load_all(".")
gab <- gabor_pyramid(intensity)
rm(gabor_pyramid())
rm(gabor_pyramid
)
gab <- gabor_pyramid(intensity)
gabor$gabor_feature_extraction(image = image, scales = 1, orientations = orientations,
gabor_rows = 39, gabor_columns = 39,
downsample_gabor = TRUE, downsample_rows = 2^i, downsample_cols = 2^i,
vectorize_magnitude = FALSE)
str(out[[i]])
str(out[[i-1]])
orientations
str(out[[i-1]][[1]])
str(out[[i-1]][[1]]$magnitude)
image(out[[i-1]][[1]]$magnitude)
image(out[[i-1]][[1]]$magnitude[[1]])
devtools::load_all(".")
gab <- gabor_pyramid(intensity)
gab[[1]]
str(gab[[1]])
devtools::load_all(".")
gab <- gabor_pyramid(intensity)
gab[[1]]
str(gab[[1]])
str(gab[[2]])
str(gab[[3]])
str(gab[[4]])
str(gab[[5]])
gabor <- OpenImageR::GaborFeatureExtract$new()
library(imager)
library(OpenImageR)
# sandbox
file <- system.file('extdata/parrots.png',package='imager')
im <- load.image(file)
red   <- im[,,1,1]
green <- im[,,1,2]
blue  <- im[,,1,3]
intensity <- (red + green + blue) / 3
gabor <- OpenImageR::GaborFeatureExtract$new()
im_gb <- gabor$gabor_feature_extraction(image = intensity, scales = 8, orientations = 4, downsample_rows = 2, downsample_cols = 2, downsample_gabor = TRUE, vectorize_magnitude = FALSE)
im_gb <- gabor$gabor_feature_extraction(image = intensity, scales = 8, orientations = 4,
gabor_rows = 39, gabor_cols = 39,
downsample_rows = 2, downsample_cols = 2, downsample_gabor = TRUE, vectorize_magnitude = FALSE)
im_gb <- gabor$gabor_feature_extraction(image = intensity, scales = 8, orientations = 4,
gabor_rows = 39, gabor_columns = 39,
downsample_rows = 2, downsample_cols = 2, downsample_gabor = TRUE, vectorize_magnitude = FALSE)
str(im_gb$gaborFeatures$magnitude)
im_gb <- gabor$gabor_feature_extraction(image = intensity, scales = 5, orientations = 8,
gabor_rows = 39, gabor_columns = 39,
downsample_rows = 2, downsample_cols = 2, downsample_gabor = TRUE, vectorize_magnitude = FALSE)
str(im_gb)
gabor$gabor_filter_bank(scales = 4, orin)
gabor$gabor_filter_bank(scales = 4, orientations = 4, gabor_rows = 8, gabor_columns = 8)
gabor$gabor_filter_bank(scales = 4, orientations = 4, gabor_rows = 8, gabor_columns = 8) -> foo
foo$gaborArray -> foo
foo
foo[1,1]
foo[4, ]
foo[[4, 1]]
OpenImageR::convolution(intensity, foo[[4, 1]])
OpenImageR::imageShow(intenity)
OpenImageR::imageShow(intensity)
OpenImageR::imageShow(t(intensity))
imageShow(file)
imageShow
gab0 <- read.csv("gab0.csv", FALSE)
gab0
gab0 <- as.matrix(read.csv("gab0.csv", FALSE))
gab0
image(gab0)
OpenImageR::convolution(intensity, gab0)
image(OpenImageR::convolution(intensity, gab0))
reticulate::repl_python()
reticulate::source_python('~/Projects/EyeTracking/saliency/dev_scripts/get_gabor_kernels.py')
files <- list.files("dev_scripts", pattern = "gab")
files
files <- list.files("dev_scripts", pattern = "gab*.csv")
files
files <- list.files("dev_scripts", pattern = "^gab")
files
gab <- list()
for(f in files) gab[[f]] <- as.matrix(read.csv(f, FALSE)); names(gab[[f]]) <- NULL
files <- list.files("dev_scripts", pattern = "^gab", full.names = TRUE)
gab <- list()
for(f in files) gab[[f]] <- as.matrix(read.csv(f, FALSE)); names(gab[[f]]) <- NULL
gab
gab <- list()
for(f in files) gab[[f]] <- as.matrix(read.csv(f, FALSE)); colnames(gab[[f]]) <- NULL
gab
lapply(gab, image)
files <- list.files("dev_scripts", pattern = "^gab", full.names = TRUE)
gab <- list()
for(f in files) gab[[f]] <- as.matrix(read.csv(f, FALSE)); colnames(gab[[f]]) <- NULL
lapply(gab, image)
image(gab$`dev_scripts/gab0.csv`)
image(gab$`dev_scripts/gab135.csv`)
image(gab$`dev_scripts/gab45.csv`)
image(gab$`dev_scripts/gab90.csv`)
image(gab$`dev_scripts/gab45.csv`)
image(gab$`dev_scripts/gab90.csv`)
image(gab$`dev_scripts/gab135.csv`)
gab
files <- list.files("dev_scripts", pattern = "^gab", full.names = TRUE)
files
gab <- list()
for(f in files) gab[[f]] <- as.matrix(read.csv(f, FALSE)); colnames(gab[[f]]) <- NULL
image(gab$`dev_scripts/gab000.csv`)
image(gab$`dev_scripts/gab045.csv`)
image(gab$`dev_scripts/gab090.csv`)
image(gab$`dev_scripts/gab135.csv`)
reticulate::repl_python()
